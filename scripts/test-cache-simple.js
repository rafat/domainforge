// scripts/test-cache-simple.js\n// Simple test for cache functionality\n\n// Simple in-memory cache for testing\nclass SimpleCache {\n  constructor() {\n    this.cache = new Map();\n  }\n  \n  set(key, data, ttl = 300000) { // Default 5 minutes\n    const expirationTime = Date.now() + ttl;\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n      ttl\n    });\n  }\n  \n  get(key) {\n    const item = this.cache.get(key);\n    \n    if (!item) {\n      return null;\n    }\n    \n    // Check if item has expired\n    if (Date.now() > item.timestamp + item.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return item.data;\n  }\n  \n  delete(key) {\n    return this.cache.delete(key);\n  }\n  \n  clear() {\n    this.cache.clear();\n  }\n  \n  size() {\n    return this.cache.size;\n  }\n}\n\nasync function testCache() {\n  console.log('üîç Testing simple cache...');\n  \n  const cache = new SimpleCache();\n  \n  // Test 1: Set and get\n  console.log('\\n=== Test 1: Basic operations ===');\n  cache.set('test_key', { value: 'test_data' });\n  const value = cache.get('test_key');\n  console.log('‚úÖ Set and get successful');\n  console.log(`   Value: ${JSON.stringify(value)}`);\n  \n  // Test 2: Size\n  console.log('\\n=== Test 2: Cache size ===');\n  console.log(`   Size: ${cache.size()}`);\n  \n  // Test 3: Deletion\n  console.log('\\n=== Test 3: Deletion ===');\n  const deleted = cache.delete('test_key');\n  console.log(`   Deleted: ${deleted}`);\n  console.log(`   Size after deletion: ${cache.size()}`);\n  \n  console.log('\\nüéâ Simple cache test completed!');\n}\n\ntestCache();