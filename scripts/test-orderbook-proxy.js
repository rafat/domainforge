// scripts/test-orderbook-proxy.js\n// Test script for Orderbook API integration using the proxy endpoint\n\nasync function testOrderbookProxy() {\n  console.log('üîç Testing Doma Orderbook API Integration via Proxy...')\n  \n  try {\n    // Test getting a list of names to find a valid token\n    console.log('\\nüß™ Testing names query...')\n    const namesQuery = `\n      query TestQuery {\n        names(take: 1, skip: 0) {\n          items {\n            name\n            tokens {\n              tokenId\n              ownerAddress\n            }\n          }\n          totalCount\n        }\n      }\n    `\n    \n    const namesResponse = await fetch('http://localhost:3000/api/doma/domains', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: namesQuery\n      })\n    })\n    \n    if (!namesResponse.ok) {\n      throw new Error(`HTTP error! status: ${namesResponse.status}`)\n    }\n    \n    const namesResult = await namesResponse.json()\n    \n    if (namesResult.errors) {\n      console.error('‚ùå Names query errors:', namesResult.errors)\n      return\n    }\n    \n    console.log('‚úÖ Names query successful')\n    console.log(`   Total names: ${namesResult.data.names.totalCount}`)\n    \n    let tokenId = null\n    if (namesResult.data.names.items.length > 0 && \n        namesResult.data.names.items[0].tokens.length > 0) {\n      tokenId = namesResult.data.names.items[0].tokens[0].tokenId\n      console.log(`   Found token ID: ${tokenId}`)\n    }\n    \n    // Test the getToken method with a valid token ID\n    if (tokenId) {\n      console.log('\\nüß™ Testing token query with valid token ID...')\n      const tokenQuery = `\n        query GetToken($tokenId: String!) {\n          token(tokenId: $tokenId) {\n            tokenId\n            ownerAddress\n            listings {\n              id\n              price\n              offererAddress\n            }\n            activities(take: 5) {\n              ... on TokenMintedActivity {\n                type\n                tokenId\n                createdAt\n              }\n              ... on TokenTransferredActivity {\n                type\n                tokenId\n                createdAt\n                transferredFrom\n                transferredTo\n              }\n            }\n          }\n        }\n      `\n      \n      const tokenResponse = await fetch('http://localhost:3000/api/doma/domains', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query: tokenQuery,\n          variables: { tokenId }\n        })\n      })\n      \n      const tokenResult = await tokenResponse.json()\n      \n      if (tokenResult.errors) {\n        console.log('‚ö†Ô∏è  Token query returned errors (might be expected):', tokenResult.errors)\n      } else {\n        console.log('‚úÖ Token query successful')\n        console.log(`   Token ID: ${tokenResult.data.token?.tokenId}`)\n        console.log(`   Owner: ${tokenResult.data.token?.ownerAddress}`)\n        console.log(`   Listings: ${tokenResult.data.token?.listings?.length || 0}`)\n        console.log(`   Activities: ${tokenResult.data.token?.activities?.length || 0}`)\n      }\n    }\n    \n    // Test offers query\n    console.log('\\nüß™ Testing offers query...')\n    const offersQuery = `\n      query GetOffers {\n        offers(take: 5, status: ACTIVE) {\n          items {\n            id\n            price\n            offererAddress\n            orderbook\n            createdAt\n          }\n        }\n      }\n    `\n    \n    const offersResponse = await fetch('http://localhost:3000/api/doma/domains', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: offersQuery\n      })\n    })\n    \n    const offersResult = await offersResponse.json()\n    \n    if (offersResult.errors) {\n      console.log('‚ö†Ô∏è  Offers query returned errors (might be expected):', offersResult.errors)\n    } else {\n      console.log('‚úÖ Offers query successful')\n      console.log(`   Found ${offersResult.data.offers?.items?.length || 0} offers`)\n    }\n    \n    console.log('\\nüéâ All Orderbook API proxy tests completed!')\n    \n  } catch (error) {\n    console.error('‚ùå Error testing Orderbook API via proxy:', error.message)\n    console.error('Stack trace:', error.stack)\n  }\n}\n\ntestOrderbookProxy()