// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Domain {
  id           String   @id @default(cuid())
  name         String   @unique
  tokenId      String   @unique
  owner        String
  contractAddress String
  chainId      Int
  
  // Domain registration info
  registrationDate DateTime @default(now())
  expiry       DateTime?
  
  // Landing page data
  title        String?
  description  String?
  template     String   @default("minimal")
  customCSS    String?
  isActive     Boolean  @default(true)
  
  // Analytics
  views        Int      @default(0)
  
  // SEO data
  screenshot   String?
  metaTitle    String?
  metaDescription String?
  
  // Pricing and marketplace
  forSale      Boolean  @default(false)
  price        Decimal? @db.Decimal(18, 6)
  buyNowPrice  String?
  acceptOffers Boolean  @default(true)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  offers       Offer[]
  transactions Transaction[]
  dnsRecords   DnsRecord[]
  chatConversations ChatConversation[]
  
  @@map("domains")
}

model Offer {
  id          String   @id @default(cuid())
  domainId    String
  domain      Domain   @relation(fields: [domainId], references: [id])
  
  buyer       String
  amount      String
  message     String?
  status      OfferStatus @default(PENDING)
  expiry      DateTime?
  
  txHash      String?
  blockNumber Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("offers")
}

model Transaction {
  id          String   @id @default(cuid())
  domainId    String
  domain      Domain   @relation(fields: [domainId], references: [id])
  
  buyer       String
  seller      String
  amount      String
  txHash      String
  blockNumber Int?
  status      TransactionStatus @default(PENDING)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("transactions")
}

model DnsRecord {
  id       String @id @default(cuid())
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  
  type     String // A, AAAA, CNAME, MX, TXT, etc.
  name     String
  value    String
  ttl      Int    @default(3600)
  priority Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("dns_records")
}

model Analytics {
  id          String   @id @default(cuid())
  tokenId     String
  eventType   String
  userAddress String?
  metadata    String?
  timestamp   DateTime @default(now())
  
  @@map("analytics")
}

model ChatConversation {
  id          String   @id @default(cuid())
  domainId    String
  domain      Domain   @relation(fields: [domainId], references: [id])
  buyerAddress String
  sellerAddress String
  xmtpConversationId String @unique
  lastMessageAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    ChatMessage[]
  
  @@map("chat_conversations")
  @@unique([domainId, buyerAddress, sellerAddress])
}

model ChatMessage {
  id          String   @id @default(cuid())
  conversationId String
  conversation ChatConversation @relation(fields: [conversationId], references: [id])
  senderAddress String
  content     String
  messageType String @default("text") // text, offer, system
  xmtpMessageId String? @unique
  sentAt      DateTime @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("chat_messages")
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ChatMessageType {
  TEXT
  OFFER
  SYSTEM
}
